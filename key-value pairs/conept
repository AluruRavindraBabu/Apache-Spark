Key/Value Pairs:
Spark has a special operatios on RDD with Key - Value pairs. These RDDs named as pairRDDs.
Pair RDDs are useful building block in many programs, as they expose operations that
allow you to act on each key in pararallel or regroup data across network. 


Table 4-1. Transformations on one pair RDD (example: {(1, 2), (3, 4), (3, 6)})
Function name  : reduceByKey(func)
Purpose : Combine values with the same key.
Example: rdd.reduceByKey((x, y) => x + y)
Result: {(1,2), (3,10)}


groupByKey() Group values with the
same key.
rdd.groupByKey() {(1,
[2]),
(3, [4,
6])}
combineBy
Key(createCombiner,
mergeValue,
mergeCombiners,
partitioner)
Combine values with
the same key using a
different result type.
See Examples 4-12 through 4-14.
mapValues(func) Apply a function to
each value of a pair
RDD without
changing the key.
rdd.mapValues(x => x+1) {(1,
3), (3,
5), (3,
7)}
flatMapValues(func) Apply a function that
returns an iterator to
each value of a pair
RDD, and for each
element returned,
produce a key/value
entry with the old
key. Often used for
tokenization.
rdd.flatMapValues(x => (x to 5) {(1,
2), (1,
3), (1,
4), (1,
5), (3,
4), (3,
5)}
keys() Return an RDD of just
the keys.
rdd.keys() {1, 3,
3}
Transformations on Pair RDDs | 49
Function name Purpose Example Result
values() Return an RDD of just
the values.
rdd.values() {2, 4,
6}
sortByKey() Return an RDD sorted
by the key.
rdd.sortByKey() {(1,
2), (3,
4), (3,
6)}
